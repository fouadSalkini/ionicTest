{
  "_args": [
    [
      {
        "raw": "rollup-pluginutils@^2.0.1",
        "scope": null,
        "escapedName": "rollup-pluginutils",
        "name": "rollup-pluginutils",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "/Users/macos/Documents/ionic/lionsd351/node_modules/rollup-plugin-commonjs"
    ]
  ],
  "_from": "rollup-pluginutils@^2.0.1",
  "_hasShrinkwrap": false,
  "_id": "rollup-pluginutils@2.8.2",
  "_location": "/rollup-pluginutils",
  "_nodeVersion": "12.8.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/rollup-pluginutils_2.8.2_1568404890662_0.20322097682062878"
  },
  "_npmUser": {
    "name": "guybedford",
    "email": "guybedford@gmail.com"
  },
  "_npmVersion": "6.11.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rollup-pluginutils@^2.0.1",
    "scope": null,
    "escapedName": "rollup-pluginutils",
    "name": "rollup-pluginutils",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/rollup-plugin-commonjs"
  ],
  "_resolved": "https://registry.npmjs.org/rollup-pluginutils/-/rollup-pluginutils-2.8.2.tgz",
  "_shasum": "72f2af0748b592364dbd3389e600e5a9444a351e",
  "_shrinkwrap": null,
  "_spec": "rollup-pluginutils@^2.0.1",
  "_where": "/Users/macos/Documents/ionic/lionsd351/node_modules/rollup-plugin-commonjs",
  "author": {
    "name": "Rich Harris",
    "email": "richard.a.harris@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/rollup/rollup-pluginutils/issues"
  },
  "dependencies": {
    "estree-walker": "^0.6.1"
  },
  "description": "Functionality commonly needed by Rollup plugins",
  "devDependencies": {
    "@types/estree": "0.0.39",
    "@types/jest": "^24.0.13",
    "@types/micromatch": "^3.1.0",
    "@types/node": "^12.0.4",
    "husky": "^3.0.5",
    "jest": "^24.8.0",
    "lint-staged": "^9.2.5",
    "micromatch": "^4.0.2",
    "prettier": "^1.17.1",
    "rollup": "^1.13.1",
    "rollup-plugin-commonjs": "^10.0.0",
    "rollup-plugin-node-resolve": "^5.0.1",
    "rollup-plugin-typescript": "^1.0.1",
    "shx": "^0.3.2",
    "ts-jest": "^24.0.2",
    "tslint": "^5.17.0",
    "typescript": "^3.5.1",
    "typescript-eslint-parser": "^22.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-EEp9NhnUkwY8aif6bxgovPHMoMoNr2FulJziTndpt5H9RdwC47GSGuII9XxpSdzVGM0GWrNPHV6ie1LTNJPaLQ==",
    "shasum": "72f2af0748b592364dbd3389e600e5a9444a351e",
    "tarball": "https://registry.npmjs.org/rollup-pluginutils/-/rollup-pluginutils-2.8.2.tgz",
    "fileCount": 15,
    "unpackedSize": 246173,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJde/WbCRA9TVsSAnZWagAAoBcP/382mAwrPsaKurpw1d7k\nAu3RuaEyxQ29vTgqnwuap9y2uD3+lMXK7L9aYZ9yDcIj9zbf5Fq6mf8sIaFP\ntEhJ49hCObOBN72nBco2QOQGtv7x+b9D6Z+gXFj4AQp+Lj291DMpfuIUnUfN\ndKtEvbUkQLzygiucfiQ8V+4q5KD1S1oTCaRXp7r+zO+BVlYnfV+V6U6DDsDn\ndo63yT7XTjVlSP91+2JTC/1T0eSUEKp2TppCZVTnnh9g/rBSRXbOjOdMuiEf\nIs7E6jxg55RmmuCUg+Mx6mD7QoXRn60QE/rWX0Mxebh7dBN2ozSTl0UQrPxM\n/ekSiRBlXmA+ZHB7cA9BUUu/zD3eCMlrCnIBcOSc0ghec1eYT/02FZp8BTeZ\n9HcoBpjl90KwlBuyAD0XYfxL5GcwNv/T6Opz+qXiwCGlEhrU+GV5/ORuSUej\np+pKW3fkBTMaFefB6rHZI6Eg5GZUFqeGNMgI8fkDjM6xd/Jmj6NG7MljK2tx\na1tZ0U8i1tVynvnOcPETCxkEvusSmZCvwdeHVdwEiztaAob89KZp7PDAFToQ\nbk/yuYaYWU6HM9Ld3VKivJVwGMzrAZYAM3LVI+fxWThSpxMUgTb8N5kPxiE8\n5XxBI60SFa6THoj2UoREsx8fqQBF/wDcJSpdUo8LSQIqJmdTtuIHtUXTGEiW\no7V9\r\n=rw0/\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "src",
    "dist",
    "README.md"
  ],
  "gitHead": "3038972a1295c9e8a251a6bd859aef7fd5906594",
  "homepage": "https://github.com/rollup/rollup-pluginutils#readme",
  "jsnext:main": "dist/pluginutils.es.js",
  "keywords": [
    "rollup",
    "utils"
  ],
  "license": "MIT",
  "main": "dist/pluginutils.cjs.js",
  "maintainers": [
    {
      "name": "guybedford",
      "email": "guybedford@gmail.com"
    },
    {
      "name": "lukastaegert",
      "email": "lukas.taegert@tngtech.com"
    },
    {
      "name": "rich_harris",
      "email": "richard.a.harris@gmail.com"
    }
  ],
  "module": "dist/pluginutils.es.js",
  "name": "rollup-pluginutils",
  "optionalDependencies": {},
  "readme": "# rollup-pluginutils\n\nA set of functions commonly used by Rollup plugins.\n\n\n## Installation\n\n```bash\nnpm install --save rollup-pluginutils\n```\n\n\n## Usage\n\n### addExtension\n\n```js\nimport { addExtension } from 'rollup-pluginutils';\n\nexport default function myPlugin ( options = {} ) {\n  return {\n    resolveId ( code, id ) {\n      // only adds an extension if there isn't one already\n      id = addExtension( id ); // `foo` -> `foo.js`, `foo.js -> foo.js`\n      id = addExtension( id, '.myext' ); // `foo` -> `foo.myext`, `foo.js -> `foo.js`\n    }\n  };\n}\n```\n\n\n### attachScopes\n\nThis function attaches `Scope` objects to the relevant nodes of an AST. Each `Scope` object has a `scope.contains(name)` method that returns `true` if a given name is defined in the current scope or a parent scope.\n\nSee [rollup-plugin-inject](https://github.com/rollup/rollup-plugin-inject) or [rollup-plugin-commonjs](https://github.com/rollup/rollup-plugin-commonjs) for an example of usage.\n\n```js\nimport { attachScopes } from 'rollup-pluginutils';\nimport { walk } from 'estree-walker';\n\nexport default function myPlugin ( options = {} ) {\n  return {\n    transform ( code ) {\n      const ast = this.parse( code );\n\n      let scope = attachScopes( ast, 'scope' );\n\n      walk( ast, {\n        enter ( node ) {\n          if ( node.scope ) scope = node.scope;\n\n          if ( !scope.contains( 'foo' ) ) {\n            // `foo` is not defined, so if we encounter it,\n            // we assume it's a global\n          }\n        },\n        leave ( node ) {\n          if ( node.scope ) scope = scope.parent;\n        }\n      });\n    }\n  };\n}\n```\n\n\n### createFilter\n\n```js\nimport { createFilter } from 'rollup-pluginutils';\n\nexport default function myPlugin ( options = {} ) {\n  // `options.include` and `options.exclude` can each be a minimatch\n  // pattern, or an array of minimatch patterns, relative to process.cwd()\n  var filter = createFilter( options.include, options.exclude );\n\n  return {\n    transform ( code, id ) {\n      // if `options.include` is omitted or has zero length, filter\n      // will return `true` by default. Otherwise, an ID must match\n      // one or more of the minimatch patterns, and must not match\n      // any of the `options.exclude` patterns.\n      if ( !filter( id ) ) return;\n\n      // proceed with the transformation...\n    }\n  };\n}\n```\n\nIf you want to resolve the patterns against a directory other than\n`process.cwd()`, you can additionally pass a `resolve` option:\n\n```js\nvar filter = createFilter( options.include, options.exclude, {resolve: '/my/base/dir'} )\n```\n\nIf `resolve` is a string, then this value will be used as the base directory.\nRelative paths will be resolved against `process.cwd()` first. If `resolve` is\n`false`, then the patterns will not be resolved against any directory. This can\nbe useful if you want to create a filter for virtual module names.\n\n\n### makeLegalIdentifier\n\n```js\nimport { makeLegalIdentifier } from 'rollup-pluginutils';\n\nmakeLegalIdentifier( 'foo-bar' ); // 'foo_bar'\nmakeLegalIdentifier( 'typeof' ); // '_typeof'\n```\n\n### dataToEsm\n\nHelper for treeshakable data imports\n\n```js\nimport { dataToEsm } from 'rollup-pluginutils';\n\nconst esModuleSource = dataToEsm({\n  custom: 'data',\n  to: ['treeshake']\n}, {\n  compact: false,\n  indent: '\\t',\n  preferConst: false,\n  objectShorthand: false,\n  namedExports: true\n});\n/*\nOutputs the string ES module source:\n  export const custom = 'data';\n  export const to = ['treeshake'];\n  export default { custom, to };\n*/\n```\n\n### extractAssignedNames\n\nExtract the names of all assignment targets from patterns.\n\n```js\nimport { extractAssignedNames } from 'rollup-pluginutils';\nimport { walk } from 'estree-walker';\n\nexport default function myPlugin ( options = {} ) {\n  return {\n    transform ( code ) {\n      const ast = this.parse( code );\n\n      walk( ast, {\n        enter ( node ) {\n          if ( node.type === 'VariableDeclarator' ) {\n          \tconst declaredNames = extractAssignedNames(node.id);\n          \t// do something with the declared names\n          \t// e.g. for `const {x, y: z} = ... => declaredNames = ['x', 'z']\n          }\n        }\n      });\n    }\n  };\n}\n```\n\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rollup/rollup-pluginutils.git"
  },
  "scripts": {
    "build": "rollup -c && shx cp src/pluginutils.d.ts dist/pluginutils.d.ts",
    "lint": "npm run lint:nofix -- --fix",
    "lint:nofix": "tslint --project .",
    "prepare": "npm run build",
    "prepublishOnly": "npm test",
    "pretest": "npm run build",
    "test": "jest"
  },
  "typings": "dist/pluginutils.d.ts",
  "version": "2.8.2"
}
